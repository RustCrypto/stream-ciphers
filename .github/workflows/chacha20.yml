name: chacha20

on:
  pull_request:
    paths:
      - "chacha20/**"
      - "Cargo.*"
  push:
    branches: master
    paths:
      - "chacha20/**"
      - "Cargo.*"

defaults:
  run:
    working-directory: chacha20

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-Dwarnings"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.49.0 # MSRV
          - stable
        target:
          - thumbv7em-none-eabi
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
          profile: minimal
      - run: cargo build --target ${{ matrix.target }} --release --no-default-features --features cipher
      - run: cargo build --target ${{ matrix.target }} --release --no-default-features --features legacy
      - run: cargo build --target ${{ matrix.target }} --release --no-default-features --features rng
      - run: cargo build --target ${{ matrix.target }} --release --no-default-features --features xchacha20
      - run: cargo build --target ${{ matrix.target }} --release --no-default-features --features cipher,force-soft,legacy,rng,xchacha20,zeroize

  # Tests for runtime AVX2 detection
  autodetect:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.49.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.49.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
          profile: minimal
      - run: ${{ matrix.deps }}
      - run: cargo check --target ${{ matrix.target }} --all-features
      - run: cargo test --target ${{ matrix.target }} --release
      - run: cargo test --target ${{ matrix.target }} --release --features std
      - run: cargo test --target ${{ matrix.target }} --release --features rng
      - run: cargo test --target ${{ matrix.target }} --release --features zeroize
      - run: cargo test --target ${{ matrix.target }} --release --features std,rng,zeroize

  # Tests for the AVX2 backend
  avx2:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Ctarget-cpu=haswell -Dwarnings # Enables `avx2` target feature
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.49.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.49.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - run: ${{ matrix.deps }}
      - run: cargo check --target ${{ matrix.target }} --all-features
      - run: cargo test --target ${{ matrix.target }} --release
      - run: cargo test --target ${{ matrix.target }} --release --features force-soft
      - run: cargo test --target ${{ matrix.target }} --release --features std
      - run: cargo test --target ${{ matrix.target }} --release --features rng
      - run: cargo test --target ${{ matrix.target }} --release --features zeroize
      - run: cargo test --target ${{ matrix.target }} --release --all-features

  # Tests for the portable software backend (i.e. `force-soft`)
  soft:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.49.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.49.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - run: ${{ matrix.deps }}
      - run: cargo check --target ${{ matrix.target }} --all-features
      - run: cargo test --target ${{ matrix.target }} --release --features force-soft
      - run: cargo test --target ${{ matrix.target }} --release --features force-soft,std
      - run: cargo test --target ${{ matrix.target }} --release --features force-soft,rng
      - run: cargo test --target ${{ matrix.target }} --release --features force-soft,rng,zeroize
      - run: cargo test --target ${{ matrix.target }} --release --all-features

  # Cross-compiled tests
  cross:
    strategy:
      matrix:
        include:
          # ARM64
          - target: aarch64-unknown-linux-gnu
            rust: 1.49.0 # MSRV
          - target: aarch64-unknown-linux-gnu
            rust: stable

          # PPC32
          - target: powerpc-unknown-linux-gnu
            rust: 1.49.0 # MSRV
          - target: powerpc-unknown-linux-gnu
            rust: stable

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: ${{ matrix.deps }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - run: cargo install cross
      - run: cross test --target ${{ matrix.target }} --release
      - run: cross test --target ${{ matrix.target }} --release --features force-soft
      - run: cross test --target ${{ matrix.target }} --release --features rng
      - run: cross test --target ${{ matrix.target }} --release --features std
      - run: cross test --target ${{ matrix.target }} --release --all-features
