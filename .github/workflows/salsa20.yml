name: salsa20

on:
  pull_request:
    paths:
      - "salsa20/**"
      - "Cargo.*"
  push:
    branches: master
    paths:
      - "salsa20/**"
      - "Cargo.*"

defaults:
  run:
    working-directory: salsa20

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-Dwarnings"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.85.0 # MSRV
          - stable
        target:
          - thumbv7em-none-eabi
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v4
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: cargo build --target ${{ matrix.target }}
      - run: cargo build --target ${{ matrix.target }} --features zeroize

  minimal-versions:
    uses: RustCrypto/actions/.github/workflows/minimal-versions.yml@master
    with:
        working-directory: ${{ github.workflow }}

  # Tests for runtime SIMD detection
  autodetect:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.85.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.85.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v4
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - run: cargo check --target ${{ matrix.target }} --all-features
      - run: cargo test --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --features zeroize
      - run: cargo test --target ${{ matrix.target }} --all-features

  # Tests for the ARM NEON backend
  neon:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: --cfg salsa20_force_neon -Ctarget-feature=+neon -Dwarnings
    strategy:
      matrix:
        include:
          # ARM64 Linux
          - target: aarch64-unknown-linux-gnu
            rust: 1.85.0 # MSRV
          - target: aarch64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v4
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - uses: RustCrypto/actions/cross-install@master
      - run: cross check --target ${{ matrix.target }} --all-features
      - run: cross test --target ${{ matrix.target }}
      - run: cross test --target ${{ matrix.target }} --features zeroize
      - run: cross test --target ${{ matrix.target }} --all-features

  # Tests for the SSE2 backend
  sse2:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: --cfg salsa20_force_sse2 -Dwarnings
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.85.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.85.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v4
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - run: cargo check --target ${{ matrix.target }} --all-features
      - run: cargo test --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --features zeroize
      - run: cargo test --target ${{ matrix.target }} --all-features

  # Tests for the portable software backend
  soft:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: --cfg salsa20_force_soft -Dwarnings
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.85.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.85.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v4
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - run: cargo check --target ${{ matrix.target }} --all-features
      - run: cargo test --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --features zeroize
      - run: cargo test --target ${{ matrix.target }} --all-features

  # Cross-compiled tests
  cross:
    strategy:
      matrix:
        include:
          # ARM64 - Primary target for NEON optimizations
          - target: aarch64-unknown-linux-gnu
            rust: 1.85.0 # MSRV
          - target: aarch64-unknown-linux-gnu
            rust: stable

          # ARM64 Apple Silicon (for local development validation)
          - target: aarch64-apple-darwin
            rust: 1.85.0 # MSRV
          - target: aarch64-apple-darwin
            rust: stable

          # PPC32 (for additional architecture coverage)
          - target: powerpc-unknown-linux-gnu
            rust: 1.85.0 # MSRV
          - target: powerpc-unknown-linux-gnu
            rust: stable

    runs-on: ubuntu-latest
    defaults:
      run:
        # Cross mounts only current package, i.e. by default it ignores workspace's Cargo.toml
        working-directory: .
    steps:
      - uses: actions/checkout@v4
      - uses: RustCrypto/actions/cargo-cache@master
      - run: ${{ matrix.deps }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - uses: RustCrypto/actions/cross-install@master
      - run: RUSTFLAGS="${{ matrix.rustflags }}" cross test --package salsa20 --target ${{ matrix.target }}

  # ARM NEON performance validation on native ARM64 runners
  neon-native:
    runs-on: macos-latest # Apple Silicon M1/M2 for native ARM64 NEON testing
    strategy:
      matrix:
        rust:
          - 1.85.0 # MSRV
          - stable
    steps:
      - uses: actions/checkout@v4
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Test with NEON optimizations
        run: |
          cd salsa20
          RUSTFLAGS="-C target-feature=+neon" cargo test
          RUSTFLAGS="-C target-feature=+neon" cargo test --features zeroize
          RUSTFLAGS="-C target-feature=+neon" cargo test --all-features
      - name: Validate NEON performance benchmarks
        run: |
          cd benches
          cargo bench --bench salsa20 --no-run
